QuickSort
Like Merge Sort, QuickSort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot. There are many different versions of quickSort that pick pivot in different ways.

Always pick first element as pivot.
Always pick last element as pivot (implemented below)
Pick a random element as pivot.
Pick median as pivot.
The key process in quickSort is partition(). Target of partitions is, given an array and an element x of array as pivot, 
put x at its correct position in sorted array and put all smaller elements 
(smaller than x) before x, and put all greater elements (greater than x) after x. All this should be done in linear time.


Why Quick Sort is preferred over MergeSort for sorting Arrays
Quick Sort in its general form is an in-place sort (i.e. it doesn’t require any extra storage) whereas merge sort requires O(N) 
extra storage, N denoting the array size which may be quite expensive. Allocating and de-allocating the extra space used for merge 
sort increases the running time of the algorithm. Comparing average complexity we find that both type of sorts have O(NlogN) average complexity but the constants differ. For arrays, merge sort loses due to the use of extra O(N) storage space.

Most practical implementations of Quick Sort use randomized version. The randomized version has expected time complexity of O(nLogn).
The worst case is possible in randomized version also, but worst case doesn’t occur for a particular pattern (like sorted array) and randomized Quick Sort works well in practice.

Quick Sort is also a cache friendly sorting algorithm as it has good locality of reference when used for arrays.

Quick Sort is also tail recursive, therefore tail call optimizations is done.

Why MergeSort is preferred over QuickSort for Linked Lists?
In case of linked lists the case is different mainly due to difference in memory allocation of arrays and linked lists. 
Unlike arrays, linked list nodes may not be adjacent in memory. Unlike array, in linked list, we can insert items in the middle in 
O(1) extra space and O(1) time. Therefore merge operation of merge sort can be implemented without extra space for linked lists.

In arrays, we can do random access as elements are continuous in memory. Let us say we have an integer (4-byte) array A and 
let the address of A[0] be x then to access A[i], we can directly access the memory at (x + i*4). Unlike arrays, we can not do
random access in linked list. Quick Sort requires a lot of this kind of access. In linked list to access i’th index, we have to 
travel each and every node from the head to i’th node as we don’t have continuous block of memory. 
Therefore, the overhead increases for quick sort. Merge sort accesses data sequentially and the need of random access is low.

#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <algorithm>
#include <utility>

void swap  ( int &first, int &second)
{
    int temp = first;
    first = second;
    second = temp;
}

int Partition(std::vector<int> &list , int start , int end)
{
    // Pick right most element as pivot
    int pivot = list[end];
    int pIndex = start;
    // Element less than pivot goes to left of pIndex
    // Elements greater than pivot goes to right of pIndex
    // Elements equal to pivot can go in any direction
    for ( int  j = start ; j < end  ; j++)
    {
        if ( list[j] <= pivot )
        {
            swap(list[j], list[pIndex]);
            pIndex++;
        }
    }
    //Swap pIndex with pivot
    swap(list[pIndex] , list[end]);
    //return pIndex
    return pIndex;
    
}

void QuickSort(std::vector<int> &list)
{
 int end = list.size() -1;
 int start = 0;
 //Stack for recording Pending Iteration
 std::stack<std::pair <int,int> > stackPendingIteration;
 stackPendingIteration.push(std::make_pair(start,end));
 
 while (!stackPendingIteration.empty())
 {
     //Pop top pair and get start and end 
     int start = stackPendingIteration.top().first;
     int end = stackPendingIteration.top().second;
     stackPendingIteration.pop();
     
     int pivot = Partition (list,start,end);
     if ( (pivot -1 ) > start )
     {
        stackPendingIteration.push(std::make_pair(start,pivot -1 ));
     }
     
     if ( (pivot +1)  < end)
     {
           stackPendingIteration.push(std::make_pair(pivot+1 ,end ));
     }
         
 }
 
}

void printList(std::vector<int> list, std::string label = "list")
{
    std::cout << label << ":=[";
    for(int token : list) std::cout << token << ",";
    std::cout << "]\n";
}
int main()
{

    std::vector<int> list{10,30,90,80,50,40};
    QuickSort(list);
    printList(list);
    
}
