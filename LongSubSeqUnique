class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        
        int maxlen = 0;
        int st  = 0;
        int start = 0;
        std::unordered_map<char, int> lookup;
        int i = 0;
        for(i = 0; i < s.size() ;i++) {
            if ( lookup.find(s[i]) == lookup.end()) {
                lookup[s[i]] = i;
            }
            else {
                // Check if repeating char is part of current substring
                if ( lookup[s[i]] >= st) {
                    int currlen = i - st;
                    if ( currlen > maxlen){
                        maxlen  = currlen;
                        start=st;
                    }
                    st = lookup[s[i]] + 1;
                    
                }
                lookup[s[i]] = i;
            }
        }
        if ( maxlen < i - st) {
            maxlen = i -st;
            start = st;
        }
        
        return maxlen;
    }
};
